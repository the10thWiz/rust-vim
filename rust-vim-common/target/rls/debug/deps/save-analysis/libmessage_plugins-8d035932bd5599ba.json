{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0","program":"/home/matthew/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","message_plugins","--edition=2018","/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=8d035932bd5599ba","-C","extra-filename=-8d035932bd5599ba","--out-dir","/home/matthew/Documents/rust-vim/rust-vim-common/target/rls/debug/deps","-L","dependency=/home/matthew/Documents/rust-vim/rust-vim-common/target/rls/debug/deps","--extern","libloading=/home/matthew/Documents/rust-vim/rust-vim-common/target/rls/debug/deps/liblibloading-3fae5c32e3d67275.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/matthew/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/matthew/Documents/rust-vim/rust-vim-common/target/rls/debug/deps/libmessage_plugins-8d035932bd5599ba.rmeta"},"prelude":{"crate_id":{"name":"message_plugins","disambiguator":[8585594121717950896,2414653551449446517]},"crate_root":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src","external_crates":[{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7603043973503281951,6245179856538753269]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[13741360846946026623,2672266499591153283]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4729845745352067521,14981637654352572000]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9324331421111590993,11905740212167270908]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11392341838745785002,13287300438441731562]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8694337109875809164,2250367951223185901]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10935849247287619708,10935329660555626336]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5583458701817410803,1770096645244614441]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4926505318506753650,8786990194761766393]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15262570485262297613,5690312430589388023]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16900335184017598038,9051488994794742296]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[528960645316233979,8037674519295179684]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4483237274112351560,17959943558012528736]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[384772052184402859,1578385820564656749]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[12301751291607961788,16569514459755551136]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[4223616801544016660,17489963460572122123]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[3882963855561891520,1067502799155491607]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":18,"id":{"name":"libloading","disambiguator":[4214878129216404900,6090333248326845428]}},{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","num":19,"id":{"name":"cfg_if","disambiguator":[651050597750101484,12731535272181938717]}}],"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":0,"byte_end":9487,"line_start":1,"line_end":256,"column_start":1,"column_end":93}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":102,"byte_end":103,"line_start":4,"line_end":4,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":0,"byte_end":9487,"line_start":1,"line_end":256,"column_start":1,"column_end":93},"name":"","qualname":"::","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":69},{"krate":0,"index":75},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":67}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":2788,"byte_end":2799,"line_start":72,"line_end":72,"column_start":9,"column_end":20},"name":"std_runtime","qualname":"::std_runtime","value":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":15},{"krate":0,"index":18}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(feature = \"tokio-host\"))","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":2744,"byte_end":2779,"line_start":71,"line_end":71,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":11},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3051,"byte_end":3055,"line_start":78,"line_end":78,"column_start":16,"column_end":20},"name":"Host","qualname":"::std_runtime::Host","value":"Host { tasks }","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14}],"decl_id":null,"docs":" Meant as the main way of sending commands to plugins.\n A structure that holds the input ends of the queues to each plugin,\n as well as the `JoinHandle`s to their tasks.\n","sig":null,"attributes":[{"value":"/ Meant as the main way of sending commands to plugins.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":2849,"byte_end":2906,"line_start":75,"line_end":75,"column_start":5,"column_end":62}},{"value":"/ A structure that holds the input ends of the queues to each plugin,","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":2911,"byte_end":2982,"line_start":76,"line_end":76,"column_start":5,"column_end":76}},{"value":"/ as well as the `JoinHandle`s to their tasks.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":2987,"byte_end":3035,"line_start":77,"line_end":77,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":14},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3125,"byte_end":3130,"line_start":80,"line_end":80,"column_start":13,"column_end":18},"name":"tasks","qualname":"::std_runtime::Host::tasks","value":"std::vec::Vec<std::thread::JoinHandle<std::option::Option<u8>>>","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3476,"byte_end":3479,"line_start":94,"line_end":94,"column_start":16,"column_end":19},"name":"new","qualname":"<Host<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3744,"byte_end":3768,"line_start":102,"line_end":102,"column_start":19,"column_end":43},"name":"DEFAULT_CHANNEL_CAPACITY","qualname":"::std_runtime::Host::<T>::DEFAULT_CHANNEL_CAPACITY","value":"usize","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" By default, plugins will communicate with the host using a queue capable of holding this many `Message`s.\n","sig":null,"attributes":[{"value":"/ By default, plugins will communicate with the host using a queue capable of holding this many `Message`s.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3616,"byte_end":3725,"line_start":101,"line_end":101,"column_start":9,"column_end":118}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3890,"byte_end":3894,"line_start":106,"line_end":106,"column_start":16,"column_end":20},"name":"send","qualname":"<Host<T>>::send","value":"pub fn send<impl Into<Message<T>>: Into<Message<T>>>(&mut Self,\n                                                     impl Into<Message<T>>)","parent":null,"children":[],"decl_id":null,"docs":" Sends a message to all the attached `Plugin`s.\n","sig":null,"attributes":[{"value":"/ Sends a message to all the attached `Plugin`s.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3790,"byte_end":3840,"line_start":104,"line_end":104,"column_start":9,"column_end":59}},{"value":"allow(unused_must_use)","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3849,"byte_end":3874,"line_start":105,"line_end":105,"column_start":9,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":4415,"byte_end":4421,"line_start":115,"line_end":115,"column_start":16,"column_end":22},"name":"attach","qualname":"<Host<T>>::attach","value":"pub fn attach<impl Plugin<T>: Plugin<T>>(&mut Self, impl Plugin<T>)","parent":null,"children":[],"decl_id":null,"docs":" Enables a `Plugin` by attaching it to the `Host`: a channel is built, the input is given to the host;\n a task running the `Plugin`'s `handle_message` method on every `Message` sent over the channel is spawned, and the `JoinHandle` to this task is added to the host's handles.\n","sig":null,"attributes":[{"value":"/ Enables a `Plugin` by attaching it to the `Host`: a channel is built, the input is given to the host;","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":4109,"byte_end":4214,"line_start":113,"line_end":113,"column_start":9,"column_end":114}},{"value":"/ a task running the `Plugin`'s `handle_message` method on every `Message` sent over the channel is spawned, and the `JoinHandle` to this task is added to the host's handles.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":4223,"byte_end":4399,"line_start":114,"line_end":114,"column_start":9,"column_end":185}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":4642,"byte_end":4662,"line_start":120,"line_end":120,"column_start":16,"column_end":36},"name":"attach_with_capacity","qualname":"<Host<T>>::attach_with_capacity","value":"pub fn attach_with_capacity<impl Plugin<T>: Plugin<T>>(&mut Self,\n                                                       impl Plugin<T>, usize)","parent":null,"children":[],"decl_id":null,"docs":" Like `attach`, but allows you to choose your own channel capacity.\n","sig":null,"attributes":[{"value":"/ Like `attach`, but allows you to choose your own channel capacity.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":4556,"byte_end":4626,"line_start":119,"line_end":119,"column_start":9,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5268,"byte_end":5271,"line_start":134,"line_end":134,"column_start":16,"column_end":19},"name":"end","qualname":"<Host<T>>::end","value":"pub fn end(&mut Self) -> Vec<std::thread::Result<Option<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Drops every channel end, closing them, then waits for all plugins to finish processing the remaining messages.\n","sig":null,"attributes":[{"value":"/ Drops every channel end, closing them, then waits for all plugins to finish processing the remaining messages.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5138,"byte_end":5252,"line_start":133,"line_end":133,"column_start":9,"column_end":123}}]},{"kind":"Struct","id":{"krate":0,"index":31},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5510,"byte_end":5517,"line_start":142,"line_end":142,"column_start":12,"column_end":19},"name":"Message","qualname":"::Message","value":"Message { content }","parent":null,"children":[{"krate":0,"index":33}],"decl_id":null,"docs":" Represents a single message to be sent to every plugin.\n","sig":null,"attributes":[{"value":"/ Represents a single message to be sent to every plugin.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5439,"byte_end":5498,"line_start":141,"line_end":141,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":33},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5531,"byte_end":5538,"line_start":143,"line_end":143,"column_start":9,"column_end":16},"name":"content","qualname":"::Message::content","value":"std::sync::Arc<T>","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5826,"byte_end":5829,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<Message<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":49},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6577,"byte_end":6583,"line_start":185,"line_end":185,"column_start":11,"column_end":17},"name":"Plugin","qualname":"::Plugin","value":"Plugin<T>: Sync + Send + 'static","parent":null,"children":[{"krate":0,"index":51}],"decl_id":null,"docs":" In this architectures, plugins are purely slaves: they simply react to messages.\n Their only way of returning information by default is by returning Some(status) to signal that they wish to be dropped.\n If you want your plugin to be able to communicate back to your application after some of your messages, you should hand them a channel to do so through your message type.\n","sig":null,"attributes":[{"value":"/ In this architectures, plugins are purely slaves: they simply react to messages.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6183,"byte_end":6267,"line_start":182,"line_end":182,"column_start":1,"column_end":85}},{"value":"/ Their only way of returning information by default is by returning Some(status) to signal that they wish to be dropped.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6268,"byte_end":6391,"line_start":183,"line_end":183,"column_start":1,"column_end":124}},{"value":"/ If you want your plugin to be able to communicate back to your application after some of your messages, you should hand them a channel to do so through your message type.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6392,"byte_end":6566,"line_start":184,"line_end":184,"column_start":1,"column_end":175}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6619,"byte_end":6633,"line_start":186,"line_end":186,"column_start":8,"column_end":22},"name":"handle_message","qualname":"::Plugin::handle_message","value":"pub fn handle_message(&mut Self, Message<T>) -> Option<u8>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":70},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6740,"byte_end":6747,"line_start":191,"line_end":191,"column_start":5,"column_end":12},"name":"Loading","qualname":"::PluginConstructionError::Loading","value":"PluginConstructionError::Loading(libloading::Error)","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":73},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6772,"byte_end":6784,"line_start":192,"line_end":192,"column_start":5,"column_end":17},"name":"Construction","qualname":"::PluginConstructionError::Construction","value":"PluginConstructionError::Construction","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":69},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6710,"byte_end":6733,"line_start":190,"line_end":190,"column_start":10,"column_end":33},"name":"PluginConstructionError","qualname":"::PluginConstructionError","value":"pub enum PluginConstructionError { Loading(libloading::Error), Construction, }","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":73}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":7509,"byte_end":7542,"line_start":211,"line_end":211,"column_start":8,"column_end":41},"name":"construct_plugin_with_constructor","qualname":"::construct_plugin_with_constructor","value":"pub fn construct_plugin_with_constructor<T, impl AsRef<OsStr>: AsRef<OsStr>,\n                                         impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<OsStr>,\n                                                                        impl AsRef<[u8]>,\n                                                                        Option<&Any>)\n-> Result<Box<Plugin<T>>, PluginConstructionError>","parent":null,"children":[],"decl_id":null,"docs":" Loads a dynamic library at `path`, and calls the function called `constructor` in order to instanciate a `Plugin`.\n The constructor function is the only function where you need to dirty your hands with `extern \"C\"`. Its sole purpose is to insert your boxed plugin into a pointer.\n I suggest writing a constructor of the style:\n ```rust\n #[no_mangle]\n unsafe extern \"C\" fn plugin_constructor(ptr: *mut Box<dyn Plugin<YourMessageType>>) {\n     let plugin = Box::new(YourPlugin::new());\n     insert_instace(ptr, plugin);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Loads a dynamic library at `path`, and calls the function called `constructor` in order to instanciate a `Plugin`.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6945,"byte_end":7063,"line_start":201,"line_end":201,"column_start":1,"column_end":119}},{"value":"/ The constructor function is the only function where you need to dirty your hands with `extern \"C\"`. Its sole purpose is to insert your boxed plugin into a pointer.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":7064,"byte_end":7231,"line_start":202,"line_end":202,"column_start":1,"column_end":168}},{"value":"/ I suggest writing a constructor of the style:","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":7232,"byte_end":7281,"line_start":203,"line_end":203,"column_start":1,"column_end":50}},{"value":"/ ```rust","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":7282,"byte_end":7293,"line_start":204,"line_end":204,"column_start":1,"column_end":12}},{"value":"/ #[no_mangle]","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":7294,"byte_end":7310,"line_start":205,"line_end":205,"column_start":1,"column_end":17}},{"value":"/ unsafe extern \"C\" fn plugin_constructor(ptr: *mut Box<dyn Plugin<YourMessageType>>) {","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":7311,"byte_end":7400,"line_start":206,"line_end":206,"column_start":1,"column_end":90}},{"value":"/     let plugin = Box::new(YourPlugin::new());","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":7401,"byte_end":7450,"line_start":207,"line_end":207,"column_start":1,"column_end":50}},{"value":"/     insert_instace(ptr, plugin);","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":7451,"byte_end":7487,"line_start":208,"line_end":208,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":7488,"byte_end":7493,"line_start":209,"line_end":209,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":7494,"byte_end":7501,"line_start":210,"line_end":210,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8653,"byte_end":8669,"line_start":237,"line_end":237,"column_start":8,"column_end":24},"name":"construct_plugin","qualname":"::construct_plugin","value":"pub fn construct_plugin<T,\n                        impl AsRef<OsStr>: AsRef<OsStr>>(impl AsRef<OsStr>,\n                                                         Option<&Any>)\n-> Result<Box<Plugin<T>>, PluginConstructionError>","parent":null,"children":[],"decl_id":null,"docs":" A default for `construct_plugin_with_constructor`, which will call a function named `plugin_constructor`.\n The constructor function is the only function where you need to dirty your hands with `extern \"C\"`. Its sole purpose is to insert your boxed plugin into a pointer.\n I suggest writing a constructor of the style:\n ```rust\n #[no_mangle]\n unsafe extern \"C\" fn plugin_constructor(ptr: *mut Box<dyn Plugin<YourMessageType>>) {\n     let plugin = Box::new(YourPlugin::new());\n     insert_instace(ptr, plugin);\n }\n ```\n","sig":null,"attributes":[{"value":"/ A default for `construct_plugin_with_constructor`, which will call a function named `plugin_constructor`.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8098,"byte_end":8207,"line_start":227,"line_end":227,"column_start":1,"column_end":110}},{"value":"/ The constructor function is the only function where you need to dirty your hands with `extern \"C\"`. Its sole purpose is to insert your boxed plugin into a pointer.","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8208,"byte_end":8375,"line_start":228,"line_end":228,"column_start":1,"column_end":168}},{"value":"/ I suggest writing a constructor of the style:","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8376,"byte_end":8425,"line_start":229,"line_end":229,"column_start":1,"column_end":50}},{"value":"/ ```rust","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8426,"byte_end":8437,"line_start":230,"line_end":230,"column_start":1,"column_end":12}},{"value":"/ #[no_mangle]","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8438,"byte_end":8454,"line_start":231,"line_end":231,"column_start":1,"column_end":17}},{"value":"/ unsafe extern \"C\" fn plugin_constructor(ptr: *mut Box<dyn Plugin<YourMessageType>>) {","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8455,"byte_end":8544,"line_start":232,"line_end":232,"column_start":1,"column_end":90}},{"value":"/     let plugin = Box::new(YourPlugin::new());","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8545,"byte_end":8594,"line_start":233,"line_end":233,"column_start":1,"column_end":50}},{"value":"/     insert_instace(ptr, plugin);","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8595,"byte_end":8631,"line_start":234,"line_end":234,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8632,"byte_end":8637,"line_start":235,"line_end":235,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8638,"byte_end":8645,"line_start":236,"line_end":236,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":9015,"byte_end":9030,"line_start":245,"line_end":245,"column_start":8,"column_end":23},"name":"insert_instance","qualname":"::insert_instance","value":"pub fn insert_instance<T>(*mut Box<Plugin<T>>, Box<Plugin<T>>)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a plugin into an uninitialized pointer, preventing the drop on the uninitialized memory that would happen with a simple assignment\n","sig":null,"attributes":[{"value":"/ Inserts a plugin into an uninitialized pointer, preventing the drop on the uninitialized memory that would happen with a simple assignment","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":8865,"byte_end":9007,"line_start":244,"line_end":244,"column_start":1,"column_end":143}}]},{"kind":"Type","id":{"krate":0,"index":67},"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":9404,"byte_end":9417,"line_start":256,"line_end":256,"column_start":10,"column_end":23},"name":"FfiPluginInit","qualname":"::FfiPluginInit","value":"unsafe extern \"C\" fn(: *mut Box<Plugin<T>>, : Option<&Any>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3202,"byte_end":3206,"line_start":83,"line_end":83,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3451,"byte_end":3455,"line_start":93,"line_end":93,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5572,"byte_end":5579,"line_start":146,"line_end":146,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5671,"byte_end":5678,"line_start":152,"line_end":152,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5802,"byte_end":5809,"line_start":160,"line_end":160,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5950,"byte_end":5957,"line_start":168,"line_end":168,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6059,"byte_end":6066,"line_start":174,"line_end":174,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6822,"byte_end":6845,"line_start":195,"line_end":195,"column_start":34,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":9266,"byte_end":9267,"line_start":250,"line_end":250,"column_start":81,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3202,"byte_end":3206,"line_start":83,"line_end":83,"column_start":22,"column_end":26},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":2166}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":3451,"byte_end":3455,"line_start":93,"line_end":93,"column_start":36,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":11},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5572,"byte_end":5579,"line_start":146,"line_end":146,"column_start":22,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":31},"to":{"krate":2,"index":1880}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5671,"byte_end":5678,"line_start":152,"line_end":152,"column_start":19,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":31},"to":{"krate":2,"index":1669}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5802,"byte_end":5809,"line_start":160,"line_end":160,"column_start":9,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":31},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":5950,"byte_end":5957,"line_start":168,"line_end":168,"column_start":26,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":31},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6059,"byte_end":6066,"line_start":174,"line_end":174,"column_start":21,"column_end":28},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":31},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6588,"byte_end":6592,"line_start":185,"line_end":185,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1983},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6595,"byte_end":6599,"line_start":185,"line_end":185,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1971},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":6822,"byte_end":6845,"line_start":195,"line_end":195,"column_start":34,"column_end":57},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":69},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/matthew/.cargo/registry/src/github.com-1ecc6299db9ec823/message_plugins-0.2.0/src/lib.rs","byte_start":9266,"byte_end":9267,"line_start":250,"line_end":250,"column_start":81,"column_end":82},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":65},"to":{"krate":0,"index":49}}]}